**Intuition:**
The intuition is to find the largest unique number in a given list of integers.
It iterate through the list and maintains a dictionary to store the count of each number encountered.
Finally, it checks the dictionary to find the largest unique number. 

**Algorithm:**
1. Initialize an empty dictionary and "res" to -1.
2. Iterate through each element in the list:
    a. If the element is already in the dictionary, increment its count by 1.
    b. If the element is not in the dictionary, add it to the dictionary with a count of 1.
3. Iterate through each key in the dictionary.
   If the count of the key is equal to 1, update "res" to be the maximum of the key and the current "res".
4. Return "res", which represents the largest unique number.

```
class Solution:
    def largestUniqueNumber(self, nums: List[int]) -> int:
        nums_set = {}
        res = -1

        for i in nums:
            if i in nums_set:
                nums_set[i] += 1
            else:
                nums_set[i] = 1

        for j in nums_set:
            if nums_set[j] == 1:
                res = max(j,res)
        return res
```

**Time Complexity:** O(n)
The algorithm iterates through the given list twice.
The first iteration builds the dictionary, which takes O(n).
The second iteration checks the dictionary, which also takes O(n) in the worst case.
Therefore, the overall time complexity is O(n).

**Space Complexity:** O(n)
The solution uses dictionary to store elements.
In the worst case, all elements in the list are unique, resulting in a dictionary of size O(n).

**Improvement:**
Use a Counter from the collections module to save the space.
