**Intuition:**
The intuition is to check if each integer in the list is exactly 1 greater than the the previous interger. 

**Algorithm:**
1. Sort the given list of integers using the sort() method.
2. Check if the length of the list is 1. If so, it returns True because a single integer is considered consecutive.
3. If the length of the list is greater than 1, the function iterates through the list.
4. Check if each element is exactly 1 greater than the previous element. If not, return False, otherwise, return True.

```
class Solution:
    def isConsecutive(self, nums: List[int]) -> bool:
        nums.sort()
        if len(nums) == 1:
            return True
        for i in range(len(nums)-1):
            if nums[i+1] != nums[i]+1:
                return False
        return True
```

**Time Complexity:** O(nlogn)
The sort() method is O(nlogn). The for loop iterates through thelist once, which is O(n). Therefore, the overall time complexity of the function is O(nlogn). 

**Space Complexity:** O(1)
The solution uses a constant extra space.

**Improvement:**
Reduce the time complexity to O(n), but it will increase the space complexity to O(n) by set funtion
