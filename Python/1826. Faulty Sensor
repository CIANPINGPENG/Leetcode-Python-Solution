**Intuition:**
The intuition is to find which sensor is bad and return the sensor's number, 1 or 2.
Otherwise, return -1.

**Algorithm:**
1. Compare each element of both sensor 1 and sensor 2 using a for loop.
2. If two elements at the same index are not equal, it checks whether the remaining elements of sensor 1 match with the remaining elements of sensor 2 to determine which snesor is bad.
3. If the remaining elements of sensor 1 deosn't match with the remaining elements of sensor 2, return 1.
4. If the remaining elements of sensor 2 deosn't match with the remaining elements of sensor 1, return 2.
5. Otherwise, return -1.

```
class Solution:
    def badSensor(self, sensor1: List[int], sensor2: List[int]) -> int:
        for i in range(len(sensor1)):
            if i == len(sensor1)-1:
                return -1
            if sensor1[i] != sensor2[i] :
                if sensor1[i+1:len(sensor1)] != sensor2[i:len(sensor2)-1]:
                    return 1
                elif sensor2[i+1:len(sensor2)] != sensor1[i:len(sensor1)-1]:
                    return 2
                else:
                    return -1
```

**Time Complexity:** O(n^2)
The solution invloves comparing all elements of the sensors and then checking the remaining elements of the sensors.

**Space Complexity:** O(1)
The solution uses only constant additional space. 

**Improvement:**
Use a hash table to store the elements of one of the sensors, which would reduce the time complexity to O(n) by avoiding the need to check the remaining elements of the sensors.
