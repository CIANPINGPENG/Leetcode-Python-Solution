**Intuition:**
The intuition is to calculate the shortest distance between word1 and word2 in an array.
Becasue the word may show up in an array more than once, we need to find all occurances.
Then, we check the all distances and return the shortest one.

**Algorithm:**
I used a stack to restore all index in an array for each word.
I go through the entire array and look for the first word, and then the second word.
Then I calculate all the distance by iterate and check if the the distance is less than the current shortest distance.

```
class Solution:
    def shortestDistance(self, wordsDict: List[str], word1: str, word2: str) -> int:
        
        word1index=[]
        word2index=[]

        for i in range (len(wordsDict)):
            if wordsDict[i] == word1:
                word1index.append(i)
            elif wordsDict[i] == word2:
                word2index.append(i)

        short_dis=float('+inf')
        for j in word1index:
            for k in word2index:
                if abs(j-k) < short_dis:
                    short_dis = abs(j-k)
        return short_dis
```

**Time Complexity:** O(n^2)

**Space Complexity:** O(n)

**Improvement:**
Use Two Pointer approach to improve time complexity to O(n)
