# Intuition:
The intuition is to build the result of each string as a stack or a string.
Then, I compare them if they are equal.

**Algorithm:**
I used a stack to avoid string modification.
When writing a character in the stack by iterate, we need to consider if there are backspace keystrokes after the character.
If there is a backspace keystroke, it shouldn't be written in the stack and one character in the stack should be removed if the stack is not empty.   

```
class Solution:
    def backspaceCompare(self, s: str, t: str) -> bool:
        new_s = []
        new_t = []

        for i in s:
            if i.isalpha():
                new_s.append(i)
            elif i == "#" and len(new_s)>0:
                new_s.pop()
        for j in t:
            if j.isalpha():
                new_t.append(j)
            elif j == "#" and len(new_t)>0:
                new_t.pop()

        if new_s == new_t:
            return True
```

**Time Complexity:** O(m + n)

**Space Complexity:** O(m + n)

**Improvement:**
Use Two Pointer to improve time complexity to O(n) and space complexity to O(1)
